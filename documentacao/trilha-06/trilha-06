Aluno: Nicolas Vieira de Souza - ADS 23


### 1. Exercício 1: Explique as vantagens da documentação automatizada de código e como ela pode beneficiar uma equipe de desenvolvimento.

**Vantagens da documentação automatizada de código:**

- **Consistência**: A documentação automatizada é gerada diretamente a partir do código, garantindo que ela esteja sempre atualizada com as mudanças no código-fonte.
- **Eficiência**: Reduz o tempo gasto com tarefas manuais de documentação, permitindo que os desenvolvedores se concentrem mais no desenvolvimento do que na escrita de documentação.
- **Redução de erros humanos**: Como a documentação é gerada automaticamente, a probabilidade de falhas ou desatualizações diminui consideravelmente.
- **Facilidade de manutenção**: A documentação se adapta facilmente a modificações no código, como a adição ou remoção de métodos, parâmetros e classes.
- **Acessibilidade**: Documentação gerada automaticamente pode ser estruturada e organizada de maneira que seja facilmente acessível para todos os membros da equipe.
- **Melhoria na colaboração**: Com documentação sempre atualizada, novos membros da equipe podem entender rapidamente o código e o funcionamento da aplicação, melhorando a colaboração e o onboarding.

**Benefícios para a equipe de desenvolvimento**:

- Melhora a produtividade, já que a equipe não precisa se preocupar em manter a documentação manualmente.
- Facilita a integração de novos desenvolvedores, pois eles têm acesso a informações detalhadas e sempre atualizadas sobre o sistema.
- Ajuda a manter a consistência no código e nas APIs, permitindo que a equipe se concentre mais nas funcionalidades do sistema, sem se preocupar com a manutenção de documentação desatualizada.

### 2. Exercício 2: Crie um pequeno projeto que utilize o MKDocs integrado ao Swagger para documentar uma API de um sistema fictício de gerenciamento de usuários.

**Passos para criar o projeto MKDocs com Swagger**:

1. **Instale o MKDocs**:
   Primeiro, instale o MKDocs:

   ```bash
   pip install mkdocs
   ```

2. **Crie um novo projeto MKDocs**:

   ```bash
   mkdocs new GerenciamentoDeUsuarios
   cd GerenciamentoDeUsuarios
   ```

3. **Instale o plugin Swagger UI**:
   O plugin Swagger UI para MKDocs pode ser usado para integrar a documentação Swagger.
   Instale o plugin:

   ```bash
   pip install mkdocs-swagger-ui
   ```

4. **Modifique o arquivo `mkdocs.yml`**:
   Adicione o plugin no arquivo `mkdocs.yml`:

   ```yaml
   site_name: Documentação da API - Gerenciamento de Usuários
   theme: material
   plugins:
     - swagger-ui
   ```

5. **Crie o arquivo Swagger JSON**:
   Crie um arquivo `swagger.json` que descreve a API de gerenciamento de usuários. Um exemplo simples de como seria o conteúdo do arquivo `swagger.json` pode ser:

   ```json
   {
     "swagger": "2.0",
     "info": {
       "title": "API de Gerenciamento de Usuários",
       "description": "API para gerenciamento de usuários em um sistema fictício",
       "version": "1.0.0"
     },
     "paths": {
       "/usuarios": {
         "get": {
           "summary": "Listar usuários",
           "responses": {
             "200": {
               "description": "Lista de usuários"
             }
           }
         },
         "post": {
           "summary": "Criar usuário",
           "parameters": [
             {
               "name": "nome",
               "in": "body",
               "required": true,
               "schema": {
                 "type": "object",
                 "properties": {
                   "nome": {
                     "type": "string"
                   }
                 }
               }
             }
           ],
           "responses": {
             "201": {
               "description": "Usuário criado"
             }
           }
         }
       }
     }
   }
   ```

6. **Adicione a documentação Swagger ao projeto MKDocs**:
   Coloque o arquivo `swagger.json` na pasta `docs/`.

7. **Visualize a documentação**:
   Execute o comando `mkdocs serve` para visualizar a documentação:
   ```bash
   mkdocs serve
   ```

Agora, ao acessar `http://127.0.0.1:8000`, você verá a documentação da API de gerenciamento de usuários com Swagger integrada.

### 3. Exercício 3: Usando a especificação OpenAPI, documente uma API com pelo menos três endpoints: um para listar, um para criar e um para atualizar recursos. Gere e visualize a documentação com o MKDocs.

Aqui está um exemplo simples de documentação utilizando **OpenAPI** para uma API de gerenciamento de recursos (usuários):

**Arquivo `swagger.yaml`**:

```yaml
openapi: 3.0.0
info:
  title: API de Gerenciamento de Recursos
  description: API para listar, criar e atualizar recursos.
  version: "1.0.0"
paths:
  /recursos:
    get:
      summary: Lista todos os recursos
      responses:
        "200":
          description: Lista de recursos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    nome:
                      type: string
    post:
      summary: Cria um novo recurso
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
      responses:
        "201":
          description: Recurso criado com sucesso
  /recursos/{id}:
    put:
      summary: Atualiza um recurso existente
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
      responses:
        "200":
          description: Recurso atualizado com sucesso
```

**Passos para visualizar a documentação:**

1. Coloque o arquivo `swagger.yaml` dentro da pasta `docs/`.
2. Se você já tem o projeto MKDocs configurado, atualize o arquivo `mkdocs.yml` para integrar o Swagger UI:

   ```yaml
   site_name: Documentação da API de Recursos
   theme: material
   plugins:
     - swagger-ui
   ```

3. Execute o servidor MKDocs para visualizar a documentação:
   ```bash
   mkdocs serve
   ```

Ao acessar `http://127.0.0.1:8000`, você verá a documentação gerada automaticamente para os endpoints de listar, criar e atualizar recursos.

### 4. Exercício 4: Pesquise sobre outra ferramenta de documentação automatizada (como Doxygen ou Sphinx) e explique como ela pode ser integrada ao MKDocs.

**Doxygen** é uma ferramenta de documentação automatizada amplamente usada para gerar documentação de código-fonte, especialmente para C++, C, Java, Python, e outras linguagens. Ela pode ser integrada ao MKDocs através de um processo de geração de documentação em formato HTML, que pode ser servida e gerenciada pelo MKDocs.

**Integração do Doxygen com MKDocs**:

1. **Gere a documentação com Doxygen**:
   Configure o Doxygen para gerar a documentação do código em formato HTML.
   Crie um arquivo de configuração `Doxyfile` e execute o comando `doxygen` para gerar a documentação.

2. **Adicione a documentação gerada ao MKDocs**:
   Coloque os arquivos gerados pelo Doxygen na pasta `docs/` do seu projeto MKDocs.

3. **Configure o `mkdocs.yml`**:
   Certifique-se de que o arquivo `mkdocs.yml` está configurado corretamente para servir os arquivos gerados pelo Doxygen.

Isso permitirá que você tenha uma documentação automatizada e visualizável através do MKDocs.

### 5. Exercício 5: Modifique o exemplo fornecido da API de produtos, adicionando um endpoint para excluir um produto, e atualize a documentação automaticamente com o Swagger.

Aqui está como você pode adicionar o endpoint de exclusão para um produto:

**Modificação do `swagger.json` para adicionar o endpoint de exclusão**:

```json
{
  "swagger": "2.0",
  "info": {
    "title": "API de Gerenciamento de Produtos",
    "description": "API para gerenciar produtos",
    "version": "1.0.0"
  },
  "paths": {
    "/produtos": {
      "get": {
        "summary": "Listar produtos",
        "responses": {
          "200": {
            "description": "Lista de produtos"
          }
        }
      },
      "post": {
        "summary": "Criar produto",
        "parameters": [
          {
            "name": "nome",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "nome": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Produto criado"
          }
        }
      }
    },
    "/produtos/{id}": {
      "put": {
        "summary": "Atualizar produto",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nome": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Produto atualizado"
          }
        }
      },
      "delete": {
        "summary": "Excluir produto",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Produto excluído"
          }
        }
      }
    }
  }
}
```

Agora, a API possui um endpoint `DELETE /produtos/{id}` que permite excluir um produto, e a documentação foi atualizada automaticamente com o Swagger.
